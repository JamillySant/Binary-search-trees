#include <stdio.h>
#include <stdlib.h>

// Estrutura para representar um nó da arvore
typedef struct No{
int chave;               // O valor (chave) que o nó armazena
struct No *esquerda;     // Ponteiro para o filho da esquerda
struct No *direita;      // Ponteiro para o filho da direita
} No;

// Função para criar um novo nó na árvore
No* criarNo(int chave){
  No* novoNo = (No) malloc (sizeof(No);
  if(novoNo == NULL){
    printf("Erro ao fazer a alocacao de memoria!");
    exit(1);
  }
  novoNo -> chave = chave;
  novoNo -> esquerda = NULL;
  novoNo -> direita = NULL;
  
  return novoNo;
}

No* inserir(No* raiz, int chave) {
    if (raiz == NULL) {
        return criarNo(chave);
    }
    if (chave < raiz->chave) {
        raiz->esquerda = inserir(raiz->esquerda, chave);
    } else if (chave > raiz->chave) {
        raiz->direita = inserir(raiz->direita, chave);
    }
    return raiz;
}

// Função auxiliar para encontrar o nó com o menor valor
No* Menor(No* raiz) {
    while (raiz != NULL && raiz->esquerda != NULL) {
        raiz = raiz->esquerda;
    }
    return raiz;
}
// Função para remover um nó da árvore
No* remover(No* raiz, int chave) {
    if (raiz == NULL) {
        return NULL;
    }

    if (chave < raiz->chave) {
        raiz->esquerda = remover(raiz->esquerda, chave);
    } else if (chave > raiz->chave) {
        raiz->direita = remover(raiz->direita, chave);
    } else {
        // Caso com 0 ou 1 filho
        if (raiz->esquerda == NULL) {
            No* temp = raiz->direita;
            free(raiz);
            return temp;
        } else if (raiz->direita == NULL) {
            No* temp = raiz->esquerda;
            free(raiz);
            return temp;
        }
        // Caso com 2 filhos
        No* temp = Menor(raiz->direita);
        raiz->chave = temp->chave;
        raiz->direita = remover(raiz->direita, temp->chave);
    }
    return raiz;
}

/* Função para percorrer em ordem (teste visual) */
void emOrdem(No* raiz) {
 if (raiz != NULL) {
    emOrdem(raiz->esquerda);
    printf("%d ", raiz->chave);
    emOrdem(raiz->direita);
    }
}

/* Função para percorrer em ordem (teste visual) */
void emOrdem(No* raiz) {
    if (raiz != NULL) {
        emOrdem(raiz->esquerda);
        printf("%d ", raiz->chave);
        emOrdem(raiz->direita);
    }
}

/*Função main, inserção e busca (testes práticos)*/
int main() {
    No* raiz = NULL;

    // Inserções
    raiz = inserir(raiz, 8);
    inserir(raiz, 3);
    inserir(raiz, 10);
    inserir(raiz, 1);
    inserir(raiz, 6);
    inserir(raiz, 14);
    inserir(raiz, 4);
    inserir(raiz, 7);
    inserir(raiz, 13);

    printf("Árvore Binária de Busca criada (em ordem): ");
    emOrdem(raiz);
    printf("\n\n");

// Testes de busca
int valorParaBuscar = 6;
No* resultado = buscar(raiz, valorParaBuscar);
if (resultado != NULL) {
  printf("Valor %d encontrado na arvore\n", valorParaBuscar);
} else {
  printf("Valor %d não encontrado.\n", valorParaBuscar);
}
// Teste de remoção
printf("\nRemovendo o valor 3...\n");
raiz = remover(raiz, 3);
printf("Arvore em ordem apos remocao: ");
emOrdem(raiz);
printf("\n");

return 0;
}
